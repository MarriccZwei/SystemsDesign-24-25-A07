if __name__ == "__main__":
    # ONLY FOR TESTING
    import sys
    import os
    sys.path.insert(1, os.getcwd())
    # ONLY FOR TESTING

import unittest
import numpy as np
from Deflections import MoI as moi
from Deflections import MoISpanwise as moispan

class Wingbox():
    def __init__(self, tSkin, tSpar, nStiffTop, nStiffBot, stiffArea, tMidSpar, posMidSpar, cutMidSpar, cr, tr, b, accuracy:int = 256):
        self.tSkin = tSkin
        self.tSpar = tSpar
        self.nStiffTop = nStiffTop
        self.nStiffBot = nStiffBot
        self.stiffArea = stiffArea
        self.tMidSpar = tMidSpar
        self.posMidSpar = posMidSpar
        self.cutoff = cutMidSpar
        self. accuracy = accuracy
        self.b = b
        self.cr = cr
        self.tr = tr
        self.frontSparPos = 0.2
        self.rearSparPos = 0.6
        
        self.positions = np.linspace(0,self.b/2, accuracy)
    
    def chord(z, c_r, tr, b):
        c = c_r - c_r * (1 - tr) * (z / (b/2))
        return c 

    def ixx(self):
        m = moispan.calculate_moments_of_inertia()

        chords = np.linspace(0, self.b/2, self.accuracy)
        mois = np.zeros(self.accuracy)

        i=0
        for k in mois:
            mois[i] = moispan.calculate_moments_of_inertia(chords[i], [0.2,0.6], self.tTop)
        pass

    def torstiff(self):
        
        pass

    def thicknesses(self):
        thicks = []
        for i in self.positions:
            if i>self.cutoff:
                thicks.append( (self.tSkin,self.tSpar,self.tSkin,self.tSpar,0,0,0) )
            else:
                thicks.append( (self.tSkin,self.tMidSpar,self.tSkin,self.tSpar,self.tSkin,self.tSpar,self.tSkin) )
        return thicks
    
    def xBars(self):
        pass

    def ybars(self):
        pass